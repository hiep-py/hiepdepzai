from flask import Flask, jsonify
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import threading
import time
import re
from datetime import datetime

app = Flask(__name__)  # Kh·ªüi t·∫°o Flask



# --------------------- C·∫§U H√åNH TR√åNH DUY·ªÜT ---------------------
options = Options()
options.add_argument("--headless")  # Ch·∫°y ·∫©n tr√¨nh duy·ªát
options.add_argument("--disable-extensions")  # T·∫Øt ti·ªán √≠ch m·ªü r·ªông
options.add_argument("--disable-notifications")  # T·∫Øt th√¥ng b√°o
options.add_argument("--window-size=800,600")  # C·ª° c·ª≠a s·ªï tr√¨nh duy·ªát
options.add_argument("--no-sandbox")  # Ch·∫°y kh√¥ng sandbox (c·∫ßn thi·∫øt tr√™n Linux)
options.add_argument("--disable-dev-shm-usage")  # Gi·∫£m ti√™u th·ª• b·ªô nh·ªõ tr√™n Linux
options.add_argument("--log-level=3")  # ·∫®n c√°c log kh√¥ng c·∫ßn thi·∫øt

# ‚ö° T·∫Øt t·∫£i ·∫£nh ƒë·ªÉ gi·∫£m bƒÉng th√¥ng
prefs = {
    "profile.default_content_setting_values": {
        "images": 2,
        "javascript": 1,
        "geolocation": 2,
        "notifications": 2,
    }
}
options.add_experimental_option("prefs", prefs)

# Bi·∫øn l∆∞u d·ªØ li·ªáu m·ªõi nh·∫•t
latest_data = {"value": None, "timestamp": None}

# --------------------- H√ÄM C·∫¨P NH·∫¨T D·ªÆ LI·ªÜU ---------------------
def update_data():
    global latest_data
    
    while True:
        try:
            # Kh·ªüi ƒë·ªông tr√¨nh duy·ªát
            driver = webdriver.Chrome(options=options)
            URL = "https://aero.turbogames.io"
            driver.get(URL)
            
            # ƒê·ª£i ph·∫ßn t·ª≠ xu·∫•t hi·ªán
            wait = WebDriverWait(driver, 10)
            data_element = wait.until(EC.presence_of_element_located((By.XPATH, '//*[@id="app"]/div[3]/div[3]/div[1]/div[1]')))
            print("üéØ ƒê√£ t√¨m th·∫•y ph·∫ßn t·ª≠ ch·ª©a d·ªØ li·ªáu!")

            while True:
                try:
                    raw_text = data_element.text.strip()  # L·∫•y d·ªØ li·ªáu th√¥
                    
                    # üîç L·ªçc s·ªë ƒë·∫ßu ti√™n t·ª´ d·ªØ li·ªáu b·∫±ng regex
                    number_match = re.search(r"\d+(\.\d+)?", raw_text)

                    if number_match:
                        latest_value = float(number_match.group())  # Chuy·ªÉn th√†nh s·ªë th·ª±c
                        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

                        # Ch·ªâ c·∫≠p nh·∫≠t n·∫øu d·ªØ li·ªáu thay ƒë·ªïi
                        if latest_value != latest_data["value"]:
                            latest_data["value"] = latest_value
                            latest_data["timestamp"] = current_time

                            # Ghi v√†o file
                            with open("data.txt", "a") as file:
                                file.write(f"{latest_value} +|+ {current_time}\n")

                            print(f"üìä D·ªØ li·ªáu m·ªõi: {latest_value} +|+ {current_time}")

                    time.sleep(1)  # Tr√°nh v√≤ng l·∫∑p qu√° nhanh
                except Exception as e:
                    print(f"‚ö† L·ªói trong v√≤ng l·∫∑p: {e}")
                    break  # N·∫øu l·ªói li√™n t·ª•c, kh·ªüi ƒë·ªông l·∫°i tr√¨nh duy·ªát

            driver.quit()  # ƒê√≥ng tr√¨nh duy·ªát sau m·ªói v√≤ng l·∫∑p
            time.sleep(2)  # Ch·ªù tr∆∞·ªõc khi ch·∫°y l·∫°i
        except Exception as e:
            print(f"‚ùå L·ªói kh·ªüi ƒë·ªông Selenium: {e}")
            time.sleep(5)  # Ch·ªù l√¢u h∆°n n·∫øu c√≥ l·ªói nghi√™m tr·ªçng

# --------------------- API ENDPOINT ---------------------
@app.route('/', methods=['GET'])
def get_data():
    return jsonify(latest_data)  # Tr·∫£ v·ªÅ d·ªØ li·ªáu m·ªõi nh·∫•t d∆∞·ªõi d·∫°ng JSON

# --------------------- CH·∫†Y API & C·∫¨P NH·∫¨T LI√äN T·ª§C ---------------------
if __name__ == '__main__':
    # T·∫°o lu·ªìng ch·∫°y Selenium li√™n t·ª•c
    threading.Thread(target=update_data, daemon=True).start()
    
    # Ch·∫°y Flask API
    app.run(host='0.0.0.0', port=5000, debug=False)
